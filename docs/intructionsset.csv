ADD;ADD binary;Dx,Dy;BWL;*;*;*;*;*
ADD;ADD binary;Dn,<ea>;BWL;*;*;*;*;*
ADD;ADD binary;<ea>,Dn;BWL;*;*;*;*;*
ADDA;ADD binary to An;Rn,An,An;-WL;*;*;*;*;*
ADDA;ADD binary to An;<ea>,An;-WL;*;*;*;*;*
ADDI;ADD Immediate;#x,Dn;BWL;*;*;*;*;*
ADDI;ADD Immediate;#x,<ea>;BWL;*;*;*;*;*
ADDI;ADD Immediate;#x,An;-W;;*;*;*;*;*
ADDQ;ADD 3-bit immediate;#<1-8>,Dn,<ea>;BWL;*;*;*;*;*	
ADDQ;ADD 3-bit immediate;<1-8>,<ea>;BWL;*;*;*;*;*	
ADDQ;ADD 3-bit immediate;#<1-8>,An;-WL;*;*;*;*;*
ADDX;ADD eXtended;Dy,Dx;BWL;*;*;*;*;*
ADDX;ADD eXtended;-(Ay),-(Ax);BWL;*;*;*;*;*
AND;Bit-wise AND;Dx,Dy;BWL;-;*;*;0;0
AND;Bit-wise AND;<ea>,Dn;BWL;-;*;*;0;0
AND;Bit-wise AND;Dn,<ea>;BWL;-;*;*;0;0
ANDI;Bit-wise AND with Immediate;#<data>,Dn;BWL;-;*;*;0;0
ANDI;Bit-wise AND with Immediate;#<data>,<ea>;BWL;-;*;*;0;0
ASL;Arithmetic Shift Left;#<1-8>,Dy;BWL;*;*;*;*;*
ASL;Arithmetic Shift Left;Dx,Dy;BWL;*;*;*;*;*
ASL;Arithmetic Shift Left;<ea>;BWL;*;*;*;*;*
ASR;Arithmetic Shift Right;#<1-8>,Dy;BWL;*;*;*;*;*
ASR;Arithmetic Shift Right;Dx,Dy;BWL;*;*;*;*;*
ASR;Arithmetic Shift Right;<ea>;BWL;*;*;*;*;*
Bcc;Conditional Branch;Bcc.B <label>;BW-;*;*;*;*;*
Bcc;Conditional Branch;Bcc.W <label>;BW-;*;*;*;*;*
BCHG;Test a Bit and CHanGe;Dn,<ea>;B-L;-;-;*;-;-
BCHG;Test a Bit and CHanGe;#<data>,<ea>;B-L;-;-;*;-;-
BCLR;Test a Bit and CLeaR;...;B-L;-;-;*;-;-
BSET;Test a Bit and SET;...;B-L;-;-;*;-;-
BSR;Branch to SubRoutine;BSR.S <label>;BW-;*;*;*;*;*
BSR;Branch to SubRoutine;BSR.W <label>;BW-;*;*;*;*;*
BTST;Bit TeST;Dn,<ea>;B-L;-;-;*;-;-
BTST;Bit TeST;#<data>,<ea>;B-L;-;-;*;-;-
CHK;CHecK Dn Against Bounds;<ea>,Dn;-W-;-;*;U;U;U
CLR;CLeaR;<ea>;BWL;-;0;1;0;0
CLR;CLeaR;Dn;BWL;-;0;1;0;0
CMP;CoMPare;Dx,Dy;BWL;-;*;*;*;*
CMP;CoMPare;<ea>,Dn;BWL;-;*;*;*;*
CMPA;CoMPare Address;Rn,An;-WL;-;*;*;*;*
CMPA;CoMPare Address;<ea>,An,An;-WL;-;*;*;*;*
CMPA;CoMPare Address;#<data>,An;-WL;-;*;*;*;*
CMPI;CoMPare Immediate;#<data>,Dn;BWL;-;*;*;*;*
CMPI;CoMPare Immediate;<data>,<ea>;BWL;-;*;*;*;*
CMPM;CoMPare Memory;(Ay)+,(Ax)+; BWL;-;*;*;*;*
DBcc;Looping Instruction;DBcc Dn,<label>;-W-;*;*;*;*;*
DIVS;DIVide Signed;Dx,Dy;-W-;-;*;*;*;0
DIVS;DIVide Signed;<ea>,Dn;-W-;-;*;*;*;0
DIVS;DIVide Signed;#<data>,Dn;-W-;-;*;*;*;0
DIVU;DIVide Unsigned;Dx,Dy;-W-;-;*;*;*;0
DIVU;DIVide Unsigned;<ea>,Dn;-W-;-;*;*;*;0
DIVU;DIVide Unsigned;#<data>,Dn;-W-;-;*;*;*;0
EOR;Exclusive OR;Dx,Dy;BWL;-;*;*;0;0
EOR;Exclusive OR;Dn,<ea>;BWL;-;*;*;0;0
EORI;Exclusive OR Immediate;#<data>,Dn;BWL;-;*;*;0;0
EORI;Exclusive OR Immediate;<data>,<ea>;BWL;-;*;*;0;0
EXG;Exchange any two registers;Rx,Ry;--L;*;*;*;*;*
EXT;Sign EXTend;Dn;-WL;-;*;*;0;0
JMP;JuMP to Affective Address;<ea>;;*;*;*;*;*
JSR;Jump to SubRoutine;<ea>;;*;*;*;*;*
LEA;Load Effective Address;<ea>,An;--L;*;*;*;*;*
LSL;Logical Shift Left;Dx,Dy;BWL;*;*;*;0;*
LSL;Logical Shift Left;#<1-8>,Dy;BWL;*;*;*;0;*
LSL;Logical Shift Left;<ea>;BWL;*;*;*;0;*
LSR;Logical Shift Right;...;BWL;*;*;*;0;*
MOVE;Copy value;Dx,Dy;BWL;-;*;*;0;0
MOVE;Copy value;Rn,Dy;-WL;-;*;*;0;0
MOVE;Copy value;Dn,<ea>;BWL;-;*;*;0;0
MOVE;Copy value;<ea>,Dn;BWL;-;*;*;0;0
MOVE;Copy value;<ea>,<ea>;BWL;-;*;*;0;0
MOVE;Copy value;#<data>,Dn;BWL;-;*;*;0;0
MOVE;Copy value;#<data>,<ea>;BWL;-;*;*;0;0
MOVEA;MOVE Address;Dn,An;-WL;*;*;*;*;*
MOVEA;MOVE Address;<ea>,An;-WL;*;*;*;*;*
MOVEA;MOVE Address;An,<ea>;-WL;*;*;*;*;*
MOVEA;MOVE Address;#<data>,An;-WL;*;*;*;*;*
MOVE;To CCR;<ea>,CCR;-W-;I;I;I;I;I
MOVE;To SR;<ea>,SR;-W-;I;I;I;I;I
MOVE;From SR;SR,<ea>;-W-;*;*;*;*;*
MOVE;USP to/from Address Register;USP,An;--L;*;*;*;*;*
MOVE;USP to/from Address Register;An,USP;--L;*;*;*;*;*
MOVEM;MOVE Multiple;<register list>,<ea>;-WL;*;*;*;*;*
MOVEM;MOVE Multiple;<ea>,<register list>;-WL;*;*;*;*;*
MOVEQ;MOVE 8-bit immediate;#<-128.+127>,Dn;--L;-;*;*;0;0
MULS;MULtiply Signed;Dx,Dy;-W-;-;*;*;0;0
MULS;MULtiply Signed;<ea>,Dn;-W-;-;*;*;0;0
MULS;MULtiply Signed;#<data>,Dn;-W-;-;*;*;0;0
MULU;MULtiply Unsigned;Dx,Dy;-W-;-;*;*;0;0
MULU;MULtiply Unsigned;<ea>,Dn;-W-;-;*;*;0;0
MULU;MULtiply Unsigned;#<data>,Dn;-W-;-;*;*;0;0
NEG;NEGate;Dn;BWL;*;*;*;*;*
NEG;NEGate;<ea>;BWL;*;*;*;*;*
NEGX;NEGate with eXtend;Dn;BWL;*;*;*;*;*
NEGX;NEGate with eXtend;<ea>;BWL;*;*;*;*;*
NOP;No OPeration;NOP;;*;*;*;*;*
NOT;Form one's complement;Dn;BWL;-;*;*;0;0
NOT;Form one's complement;<ea>;BWL;-;*;*;0;0
OR;Bit-wise OR;<ea>,Dn;BWL;-;*;*;0;0
OR;Bit-wise OR;<ea>,Dn,<ea>;BWL;-;*;*;0;0
OR;Bit-wise OR;<ea>,Dx,Dy;BWL;-;*;*;0;0
ORI;Bit-wise OR with Immediate;#<data>,<ea>;BWL;-;*;*;0;0
ORI;Bit-wise OR with Immediate;#<data>,Dn;BWL;-;*;*;0;0
ROL;ROtate Left;#<1-8>,Dy;BWL;-;*;*;0;*
ROL;ROtate Left;#<1-8>,Dx,Dy;BWL;-;*;*;0;*
ROL;ROtate Left;#<1-8>,<ea>;BWL;-;*;*;0;*
ROR;ROtate Right;...;BWL;-;*;*;0;*
ROXL;ROtate Left with eXtend;...;BWL;*;*;*;0;*
ROXR;ROtate Right with eXtend;...;BWL;*;*;*;0;*
RTE;ReTurn from Exception;RTE;;I;I;I;I;I
RTR;ReTurn and Restore;RTR;;I;I;I;I;I
RTS;ReTurn from Subroutine;RTS;;*;*;*;*;*
SUB;SUB binary;Dx,Dy,Dn;BWL;*;*;*;*;*
SUB;SUB binary;Dn,<ea>;BWL;*;*;*;*;*
SUB;SUB binary;<ea>,Dn;BWL;*;*;*;*;*
SUBA;SUB binary to An;Rn,An;-WL;*;*;*;*;*
SUBA;SUB binary to An;<ea>,An;-WL;*;*;*;*;*
SUBI;SUB Immediate;#x,Dn;BWL;*;*;*;*;*
SUBI;SUB Immediate;#x,<ea>;BWL;*;*;*;*;*
SUBI;SUB Immediate;#x,An;-W;;*;*;*;*;*
SUBQ;SUB 3-bit immediate;#<1-8>,Dn;BWL;*;*;*;*;*	
SUBQ;SUB 3-bit immediate;<1-8>,<ea>;BWL;*;*;*;*;*	
SUBQ;SUB 3-bit immediate;#<1-8>,An;-WL;*;*;*;*;*
SUBX;SUB eXtended;Dy,Dx;BWL;*;*;*;*;*
SUBX;SUB eXtended;-(Ay),-(Ax);BWL;*;*;*;*;*
SWAP;SWAP words of Dn;Dn;-W-;-;*;*;0;0
TRAP;Execute TRAP Exception;#<vector>;;*;*;*;*;*
TRAPV;TRAPV Exception if V-bit Set;TRAPV;;*;*;*;*;*
TST;TeST for negative or zero;<ea>;BWL;-;*;*;0;0
TST;TeST for negative or zero;Dn;BWL;-;*;*;0;0